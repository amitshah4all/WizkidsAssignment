using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;


namespace WizkidsDemo
{
    /// <summary>
    /// 
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Program
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("------------------------------------------------------------------------------------");
            Console.WriteLine("1. Enter Keyword to Check string is Palindrome or not?: ");
            Console.WriteLine("------------------------------------------------------------------------------------");
            string consoleInput = Console.ReadLine();
            if (IsPalindrome(consoleInput))
                Console.WriteLine("String is Palindrome");
            else
                Console.WriteLine("String is not Palindrome");
            Console.WriteLine("------------------------------------------------------------------------------------");


            Console.WriteLine("2. Write a method that prints the numbers from 1 to 100, but for multiples of 3 print Foo, ");
            Console.WriteLine(" for multiples of 5 print Bar and for numbers that are multiples of both 3 and 5 print FooBar. ");
            Console.WriteLine("------------------------------------------------------------------------------------");
            CheckAndPrintFooBar(1, 100);
            Console.WriteLine("------------------------------------------------------------------------------------");


            Console.WriteLine("3. Find and Replace all valid email Addresses in a string: ");
            Console.WriteLine("------------------------------------------------------------------------------------");
            string strInputEmails = "Christian has the email address christian+123@gmail.com. " +
                "Christian's friend, john Cave-Brow, had the email address john.cave-brown@gmail.com. " +
                 "John's daughter Kira studies at Oxford University and has email address Kira123@oxford.co.uk. " +
                 "Her Twitter handle is @kira.cavebrown.";

            Console.WriteLine(strInputEmails);

            Console.WriteLine("Replaces string is:");
            Console.WriteLine("--------------------");

            string strOutputEmails = FindAndReplaceEmails(strInputEmails);
            Console.WriteLine(strOutputEmails);
            Console.WriteLine("------------------------------------------------------------------------------------");

            Console.WriteLine("4. Write amethod that can generate alist of words based on input word and alphabets:");
            Console.WriteLine("------------------------------------------------------------------------------------");
            Console.WriteLine("4a. How many non-unique alternative words can ber generated using this word tes,alphabet a-z " +
                "(26 letters and maxixmum Damerau-Levenshtein distance=1)");
            Console.WriteLine("------------------------------------------------------------------------------------");

            //Code for 4a


            List<string> strDatabase = new List<string> { "text", "tent", "temp", "teeeee", "texdss", "trttxxtx", "tesp", "tes", "testp", "tets" };

            List<string> alternativeWords = GenerateWords("test", strDatabase);
            Console.WriteLine("Alternative words:");
            Console.WriteLine(string.Join(", ", alternativeWords));
            Console.WriteLine();

            // TODO: 4.a How many non-unique alternative words can be generated using the word test, alphabet a-z (26 letters) and maximum Damerau–Levenshtein distance = 1?
            Console.WriteLine(string.Format("Number of alternative words: {0}", alternativeWords.Count));
            Console.WriteLine();



            Console.WriteLine("------------------------------------------------------------------------------------");
            Console.WriteLine("4b. Write methods that can calculate the number ofalternativewords based on input word length " +
                "and alphabet length(assuming maxixmum Damerau-Levenshtein distance=1) ");               
            Console.WriteLine("------------------------------------------------------------------------------------");

            //Code for 4b
            string strCheckWord = "test";
            Console.WriteLine("input word: " + strCheckWord);
            Console.WriteLine("Alphabet Length: 26");
            Console.WriteLine(string.Format("Possible non-unique alternatives using distance = 1 for \"{0}\": {1}", strCheckWord, CheckDamerauLevenshteinDistanceCount(strCheckWord.Length, 26)));
            
            Console.WriteLine("------------------------------------------------------------------------------------");

            Console.WriteLine("Press any key to exit.");
            Console.ReadKey();
        }

        /// <summary>
        /// Determines whether the specified string input is palindrome.
        /// </summary>
        /// <param name="strInput">The string input.</param>
        /// <returns>
        ///   <c>true</c> if the specified string input is palindrome; otherwise, <c>false</c>.
        /// </returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for IsPalindrome
        public static bool IsPalindrome(string strInput)
        {
            bool result = false;
            try
            {
                string strRev = new string(Enumerable.Range(1, strInput.Length).Select(i => strInput[strInput.Length - i]).ToArray());

                result = strInput.Equals(strRev, StringComparison.InvariantCultureIgnoreCase);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

            }
            return result;
        }

        /// <summary>
        /// Checks the and print foo bar.
        /// </summary>
        /// <param name="startNumber">The start number.</param>
        /// <param name="endNumber">The end number.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckAndPrintFooBar
        static void CheckAndPrintFooBar(int startNumber, int endNumber)
        {
            try
            {
                StringBuilder sbResult = new StringBuilder();
                int numberCounter = startNumber;
                while (numberCounter <= endNumber)
                {

                    if ((numberCounter % 3 == 0) && (numberCounter % 5 == 0))
                    {                       
                        sbResult.Append("FooBar");
                    }
                    else if (numberCounter % 3 == 0)
                    {                       
                        sbResult.Append("Foo");
                    }
                    else if (numberCounter % 5 == 0)
                    {                       
                        sbResult.Append("Bar");
                    }
                    else
                    {                       
                        sbResult.Append(numberCounter.ToString());
                    }
                    if (numberCounter < endNumber)
                        sbResult.Append(", ");
                    numberCounter += 1;
                }
                Console.WriteLine(sbResult.ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }           
        }

        /// <summary>
        /// Extracts the emails from given string.
        /// </summary>
        /// <param name="inputString">The input string.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExtractEmails
        static string FindAndReplaceEmails(string inputString)
        {
            StringBuilder strBulEmails = new StringBuilder();

            try
            {
                //Valid email check regx 
                Regex emailRegex = new Regex(@"\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*",
                    RegexOptions.IgnoreCase);

                //Find all the matched items that matches with email regX pattern
                MatchCollection emailMatches = emailRegex.Matches(inputString);
                
                foreach (Match emailMatch in emailMatches)
                {
                    if (EmailIsValid(emailMatch.Value))
                        strBulEmails.AppendLine(emailMatch.Value);
                }
                //store to file
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
           
            return strBulEmails.ToString();
        }


        /// <summary>
        /// Checks is given Emails is valid.
        /// </summary>
        /// <param name="email">The email.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for EmailIsValid
        static bool EmailIsValid(string email)
        {
            string expression = "\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*";

            if (Regex.IsMatch(email, expression))
            {
                if (Regex.Replace(email, expression, string.Empty).Length == 0)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Generates the words.
        /// </summary>
        /// <param name="word">The word.</param>
        /// <param name="wordList">The word list.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GenerateWords
        static List<string> GenerateWords(string word, List<string> wordList)
        {

            List<string> resultWordsList = new List<string>();
            try
            {             

                foreach (string str in wordList)
                {
                    if (CheckDamerauLevenshteinDistance(word, str) == 1)
                        resultWordsList.Add(str);
                }

            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }
            

            return resultWordsList;            
        }

        /// <summary>
        /// Checks the damerau levenshtein distance.
        /// </summary>
        /// <param name="a">a.</param>
        /// <param name="b">The b.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckDamerauLevenshteinDistance
        static int CheckDamerauLevenshteinDistance(string a, string b)
        {
            int[,] d = new int[a.Length + 1, b.Length + 1];

            try
            {
                if (string.IsNullOrEmpty(a))
                {
                    if (!string.IsNullOrEmpty(b))
                    {
                        return b.Length;
                    }
                    return 0;


                }

                if (string.IsNullOrEmpty(b))
                {
                    if (!string.IsNullOrEmpty(a))
                    {
                        return a.Length;
                    }
                    return 0;
                }

                int cost;

                int min1;
                int min2;
                int min3;

                for (int i = 0; i <= d.GetUpperBound(0); i += 1)
                {
                    d[i, 0] = i;
                }

                for (int i = 0; i <= d.GetUpperBound(1); i += 1)
                {
                    d[0, i] = i;
                }

                for (int i = 1; i <= d.GetUpperBound(0); i += 1)
                {
                    for (int j = 1; j <= d.GetUpperBound(1); j += 1)
                    {
                        cost = (a[i - 1] != b[j - 1]) ? 1 : 0;

                        min1 = d[i - 1, j] + 1;
                        min2 = d[i, j - 1] + 1;
                        min3 = d[i - 1, j - 1] + cost;
                        d[i, j] = Math.Min(Math.Min(min1, min2), min3);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            

            return d[d.GetUpperBound(0), d.GetUpperBound(1)];

        }

        
        /// <summary>
        /// Checks the damerau levenshtein distance count.
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="target">The target.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckDamerauLevenshteinDistanceCount
        static int CheckDamerauLevenshteinDistanceCount(int WordLength, int alphabetLength)
        {
            var m = alphabetLength;
            var n = WordLength;
            var currentRow = 0;
            var distance = new int[2, m + 1];
            try
            {
                if (WordLength == 0)
                {
                    if (alphabetLength == 0) return 0;
                    return alphabetLength;
                }
                if (alphabetLength == 0) return WordLength;

                if (WordLength > alphabetLength)
                {
                    var temp = alphabetLength;
                    alphabetLength = WordLength;
                    WordLength = temp;
                }

               
                
                // Initialize the distance matrix
                for (var j = 1; j <= m; j++) distance[0, j] = j;

               
                for (var i = 1; i <= n; ++i)
                {
                    currentRow = i & 1;
                    distance[currentRow, 0] = i;
                    var previousRow = currentRow ^ 1;
                    for (var j = 1; j <= m; j++)
                    {
                        var cost = (alphabetLength == WordLength ? 0 : 1);
                        distance[currentRow, j] = Math.Min(Math.Min(
                                    distance[previousRow, j] + 1,
                                    distance[currentRow, j - 1] + 1),
                                    distance[previousRow, j - 1] + cost);
                    }
                }
               
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }
            return distance[currentRow, m];
        }
    }
}
